---
AWSTemplateFormatVersion: '2010-09-09'
Description: Standard Controller Provisioning(EC2 Instance and ALB)
Parameters:
  EC2KeyName:
    Description: Select a key pair to enable SSH access to the EC2 instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 key pair.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC in which the stack should be deployed
  EC2Name:
    Type: String
    Description: Specify the name of the EC2 instance
  EC2InstanceType:
    Type: AWS::EC2::Instance::InstanceType
    Description: Select the desired EC2 instance type
    Type: String
    AllowedValues:
    - t2.medium
    - t2.micro
    ConstraintDescription: Must be a valid EC2 instance type.
  EC2SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Choose the subnet in which the EC2 instance will be launched
  BastionHost:
    Type: String
    Description: Enter Bastion Host IP
Mappings:
  RegionMap: 
    us-east-1: 
      "HVM64": "ami-0be2609ba883822ec"
    us-west-1: 
      "HVM64": "ami-0be2609ba883822ec"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - VpcId
    - Label:
        default: Controller Configuration
      Parameters:
      - EC2Name
      - EC2InstanceType
      - EC2SubnetId
      - EC2KeyName
      - BastionHost
Resources:
  myKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS Symmetric Key"
      Enabled: 'true'
      EnableKeyRotation: 'true'  
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
           AWS:
            - Fn::Sub: "arn:aws:iam::${AWS::AccountId}:root"
          Action: kms:*
          Resource: '*'
      KeyUsage: ENCRYPT_DECRYPT    
      Tags:
        - Key: "Name"
          Value: Encrypted KMS
  mySecrets:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: MySecret
      Description: "This secret has a dynamically generated secret password."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        PasswordLength: 30
      KmsKeyId: !Ref myKey
      Tags:
        -
          Key: Name
          Value: CFDemo
  EC2Role:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: # Tells that Ec2 can assume this role
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Principal:
                Service:
                  - ec2.amazonaws.com
        Policies: # Tells that you can call for the secret value
          - PolicyName: "smAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                  Resource:
                  - !Ref mySecrets
          - PolicyName: "kmsAccess"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                  - kms:DescribeKey
                  - kms:GenerateDataKey
                  - kms:Decrypt
                  Resource:
                  - !GetAtt myKey.Arn
        RoleName: 'ec2RoleCFDemo'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:  'instance-profile-ec2-CFDemo'
      Roles:
        - !Ref EC2Role
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      KeyName: !Ref EC2KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: !Ref EC2Name
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash -xe
           aws --region ${AWS::Region} secretsmanager get-secret-value --secret-id MySecret --query SecretString > /home/ec2-user/credentials.txt
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh to client host
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Join ["/", [!Ref BastionHost, 32]]
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: EC2Instance
  TestOutput:
    Value: !Join ["/", [!Ref BastionHost, 0]]
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - AvailabilityZone
  PrivateDnsName:
    Description: Public DNSName of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PrivateDnsName
  PrivateIp:
    Description: Private IP address of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PrivateIp